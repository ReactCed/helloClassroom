This is the ProfHome.tsx

import { useState, useEffect } from 'react';
import {useSound} from 'react-sounds';
import { useNavigate, useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import type { RootState } from '../../store/store';
import {setRecord, getRecordSlice, getProfNameSlice, getProfImageSlice, setEditID, setEditCode, setEditTitle, setEditSection, delClassSlice} from '../../store/slice/profHomeSlice';
import ProfHeader from '../../components/ProfHeader';
import ProfSidebar from '../../components/ProfSidebar';
import '../../assets/css/ProfHome.css';
import AddClassModal from '../../components/AddClassModal';
import EditClassModal from '../../components/EditClassModal';
import Swal from 'sweetalert2';

function ProfHome() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const record = useSelector((state: RootState) => state.profHome.record);

  const [profNames, setProfNames] = useState<{ [key: string]: string }>({});
  const [profImage, setProfImage] = useState<{ [key: string]: string }>({});
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredRecords, setFilteredRecords] = useState(record);

  useEffect(() => {
    getRecord();
  },[]);

  useEffect(() => {
    if (record.length > 0) {
      record.forEach(async (rec) => {
        const name = await getProfNameSlice(rec.class_classprof_profid);
        setProfNames((prev) => ({ ...prev, [rec.class_classprof_profid]: name }));

        const image = await getProfImageSlice(rec.class_classprof_profid);
        setProfImage((prev) => ({ ...prev, [rec.class_classprof_profid]: image }));
      });
    }
  }, [record]);

  // Real-time search filter
  useEffect(() => {
    const filtered = record.filter((rec) => {
      const titleMatch = rec.class_classprof_title.toLowerCase().includes(searchTerm.toLowerCase());
      const sectionMatch = rec.class_classprof_section.toLowerCase().includes(searchTerm.toLowerCase());
      const codeMatch = rec.class_classprof_code.toString().includes(searchTerm);
      const profNameMatch = profNames[rec.class_classprof_profid]?.toLowerCase().includes(searchTerm.toLowerCase()) || false;
      
      return titleMatch || sectionMatch || codeMatch || profNameMatch;
    });
    setFilteredRecords(filtered);
  }, [searchTerm, record, profNames]);

  // For Modal Start
  const { play } = useSound('notification/popup');
  const [open, setOpen] = useState(false);
  const [open2, setOpen2] = useState(false);
  // For Modal End

  //   Sidebar Function Start
  const [sidebarActive, setSidebarActive] = useState(false);

  const toggleSidebar = () => {
    setSidebarActive(!sidebarActive);
  };
  //   Sidebar Function End

  const getRecord = async () => {
    getRecordSlice(dispatch);
  }

  const addClass = async () => {
    play();
    setOpen(true);
  }

  const edit = async (id: number, code: number, title: string, section: string) => {
    play();
    setOpen2(true);
    dispatch(setEditID(id));
    dispatch(setEditCode(code));
    dispatch(setEditTitle(title));
    dispatch(setEditSection(section));
  }

  const del = async (id: number, code: number) => {
    Swal.fire({
      title:'Are You Sure?',
      text:'Do you want to delete this class?',
      icon:'info',
      showDenyButton:true
    }).then((result) => {
      if (result.isConfirmed) {
        delClassSlice(id, code, dispatch);
      } else if (result.isDenied) {
        window.location.reload();
      }
    })
  }

  const viewClass = async (code: number) => {
    navigate(`/ProfStream/${code}`);
  }

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  }

  const clearSearch = () => {
    setSearchTerm('');
  }

  return (
    <>
      <AddClassModal open={open} onOpenChange={setOpen} />
      <EditClassModal open={open2} onOpenChange={setOpen2} />
      <ProfHeader />

      {/* Sidebar Start */}
      <button className="burger-btn" onClick={toggleSidebar}>
        <i className="fa-solid fa-list" style={{fontSize:15}}></i>
      </button>
      <ProfSidebar sidebarActive={sidebarActive} toggleSidebar={toggleSidebar} />
      {/* Sidebar End */}
      
      <div id="content">
        <div className="container mt-4">
          {/* Main Content Start */}
          <div>
            <div className="search-add-container">
              <div className="search-container">
                <div className="search-input-wrapper">
                  <i className="fa-solid fa-search search-icon"></i>
                  <input 
                    type="text" 
                    className="search-input" 
                    placeholder="Search classes by title, section, code, or professor..."
                    value={searchTerm}
                    onChange={handleSearchChange}
                  />
                  {searchTerm && (
                    <button className="clear-search-btn" onClick={clearSearch}>
                      <i className="fa-solid fa-times"></i>
                    </button>
                  )}
                </div>
              </div>
              <button className='btn btn-outline-primary add-class-btn' onClick={() => addClass()} onMouseEnter={e => e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)'} onMouseLeave={e => e.currentTarget.style.transform = 'translateY(0) scale(1)'}><i className="fa-solid fa-plus add-icon"></i> Add Class</button>
            </div>

            {/* Search Results Info */}
            {searchTerm && (
              <div className="search-results-info">
                <span className="results-count">
                  {filteredRecords.length} class{filteredRecords.length !== 1 ? 'es' : ''} found
                  {searchTerm && <span className="search-term"> for "{searchTerm}"</span>}
                </span>
              </div>
            )}

            <div className="cards-container">
              {/* Premium Card Start */}

              {filteredRecords.length > 0 ? (
                filteredRecords.map((rec) => (
                <div className="premium-card premium-animate" key={rec.class_classprof_id}>
                  <div className="card-glow"></div>

                  <div className="card-header">
                    <div className="profile-container">
                      <img src={profImage[rec.class_classprof_profid]} alt="Profile" className="profile-pic" onMouseEnter={e => e.currentTarget.style.transform = 'scale(1.1) rotate(5deg)'} onMouseLeave={e => e.currentTarget.style.transform = 'scale(1) rotate(0deg)'}/>
                      
                      <div className="profile-status"></div>
                    </div>

                    <div className="card-title-group">
                      <div style={{display:'flex', justifyContent:'flex-end'}}>
                        <div className="dropdown">
                          <button className="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>

                          <ul className="dropdown-menu">
                            <li><button className="dropdown-item" onClick={() => edit(rec.class_classprof_id, rec.class_classprof_code, rec.class_classprof_title, rec.class_classprof_section)}>Edit</button></li>

                            <li><button className="dropdown-item" onClick={() => del(rec.class_classprof_id, rec.class_classprof_code)}>Delete</button></li>
                          </ul>
                        </div>
                      </div>

                      <h5 className="card-title">
                        <span className="title-icon">ðŸ“š</span>
                        <span className="card-title-text">{rec.class_classprof_title}</span>
                      </h5>
                      
                      <p className="card-section">
                        <i className="fa-solid fa-users section-icon"></i>
                        <span className="card-text">Section: {rec.class_classprof_section}</span>
                      </p>
                      
                      <p className="card-prof">
                        <i className="fa-solid fa-user-tie prof-icon"></i>
                        <span className="card-text">Prof: {profNames[rec.class_classprof_profid]}</span>
                      </p>

                      <p className="card-prof">
                        <i className="fa-solid fa-key prof-icon"></i>
                        <span className="card-text">Class Code: {rec.class_classprof_code}</span>
                      </p>
                    </div>
                  </div>
                  
                  <div className="card-stats">
                    <div className="stat-item">
                      <span className="stat-number">24</span>

                      <span className="stat-label">Students</span>
                    </div>

                    <div className="stat-divider"></div>

                    <div className="stat-item">
                      <span className="stat-number">8</span>
                      
                      <span className="stat-label">Assignments</span>
                    </div>
                  </div>
                  
                  <div className="card-footer">
                    <button className="btn view-btn"
                      onMouseEnter={e => {
                        e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)';
                        e.currentTarget.style.boxShadow = '0 12px 32px rgba(99,102,241,0.3)';
                      }}

                      onMouseLeave={e => {
                        e.currentTarget.style.transform = 'translateY(0) scale(1)';
                        e.currentTarget.style.boxShadow = '0 4px 16px rgba(99,102,241,0.14)';
                      }}
                      
                      onClick={() => viewClass(rec.class_classprof_code)}><i className="fa-solid fa-arrow-right view-icon"></i>View Class</button>
                  </div>
                </div>
                ))
              ) : searchTerm ? (
                <div className="no-results">
                  <div className="no-results-icon">
                    <i className="fa-solid fa-search"></i>
                  </div>
                  <h3 className="no-results-title">No classes found</h3>
                  <p className="no-results-text">
                    No classes match your search for "<span className="search-term">{searchTerm}</span>". 
                    Try adjusting your search terms.
                  </p>
                  <button className="btn btn-outline-primary" onClick={clearSearch}>
                    <i className="fa-solid fa-times"></i> Clear Search
                  </button>
                </div>
              ) : (
                record.map((rec) => (
                <div className="premium-card premium-animate" key={rec.class_classprof_id}>
                  <div className="card-glow"></div>

                  <div className="card-header">
                    <div className="profile-container">
                      <img src={profImage[rec.class_classprof_profid]} alt="Profile" className="profile-pic" onMouseEnter={e => e.currentTarget.style.transform = 'scale(1.1) rotate(5deg)'} onMouseLeave={e => e.currentTarget.style.transform = 'scale(1) rotate(0deg)'}/>
                      
                      <div className="profile-status"></div>
                    </div>

                    <div className="card-title-group">
                      <div style={{display:'flex', justifyContent:'flex-end'}}>
                        <div className="dropdown">
                          <button className="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>

                          <ul className="dropdown-menu">
                            <li><button className="dropdown-item" onClick={() => edit(rec.class_classprof_id, rec.class_classprof_code, rec.class_classprof_title, rec.class_classprof_section)}>Edit</button></li>

                            <li><button className="dropdown-item" onClick={() => del(rec.class_classprof_id, rec.class_classprof_code)}>Delete</button></li>
                          </ul>
                        </div>
                      </div>

                      <h5 className="card-title">
                        <span className="title-icon">ðŸ“š</span>
                        <span className="card-title-text">{rec.class_classprof_title}</span>
                      </h5>
                      
                      <p className="card-section">
                        <i className="fa-solid fa-users section-icon"></i>
                        <span className="card-text">Section: {rec.class_classprof_section}</span>
                      </p>
                      
                      <p className="card-prof">
                        <i className="fa-solid fa-user-tie prof-icon"></i>
                        <span className="card-text">Prof: {profNames[rec.class_classprof_profid]}</span>
                      </p>

                      <p className="card-prof">
                        <i className="fa-solid fa-key prof-icon"></i>
                        <span className="card-text">Class Code: {rec.class_classprof_code}</span>
                      </p>
                    </div>
                  </div>
                  
                  <div className="card-stats">
                    <div className="stat-item">
                      <span className="stat-number">24</span>

                      <span className="stat-label">Students</span>
                    </div>

                    <div className="stat-divider"></div>

                    <div className="stat-item">
                      <span className="stat-number">8</span>
                      
                      <span className="stat-label">Assignments</span>
                    </div>
                  </div>
                  
                  <div className="card-footer">
                    <button className="btn view-btn"
                      onMouseEnter={e => {
                        e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)';
                        e.currentTarget.style.boxShadow = '0 12px 32px rgba(99,102,241,0.3)';
                      }}

                      onMouseLeave={e => {
                        e.currentTarget.style.transform = 'translateY(0) scale(1)';
                        e.currentTarget.style.boxShadow = '0 4px 16px rgba(99,102,241,0.14)';
                      }}
                      
                      onClick={() => viewClass(rec.class_classprof_code)}><i className="fa-solid fa-arrow-right view-icon"></i>View Class</button>
                  </div>
                </div>
                ))
              )}

              {/* Premium Card End */}
            </div>
            
          </div>
          {/* Main Content End */}
        </div>
      </div>
    </>
  );
}

export default ProfHome;

This is the ProfHome.css

/* Global Styles */
.bord {
    border: 1px solid black;
}

/* Content Wrapper */
.content-wrapper {
  animation: fadeInUp 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes fadeInUp {
  0% { 
    opacity: 0; 
    transform: translateY(30px);
  }
  100% { 
    opacity: 1; 
    transform: translateY(0);
  }
}

/* Search and Add Class Container */
.search-add-container {
  display: flex;
  gap: 16px;
  margin-bottom: 32px;
  align-items: center;
  animation: slideInRight 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes slideInRight {
  0% {
    opacity: 0;
    transform: translateX(30px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Search Container */
.search-container {
  flex: 1;
}

.search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.search-input {
  width: 100%;
  padding: 12px 16px 12px 48px;
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  font-size: 1rem;
  font-family: 'Poppins', sans-serif;
  color: #475569;
  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  box-shadow: 0 4px 16px rgba(99, 102, 241, 0.08);
}

.search-input:focus {
  outline: none;
  border-color: #6366f1;
  box-shadow: 0 8px 32px rgba(99, 102, 241, 0.15);
  background: #ffffff;
}

.search-input::placeholder {
  color: #94a3b8;
  font-weight: 400;
}

.search-icon {
  position: absolute;
  left: 16px;
  color: #6366f1;
  font-size: 1rem;
  z-index: 1;
}

.clear-search-btn {
  position: absolute;
  right: 12px;
  background: none;
  border: none;
  color: #94a3b8;
  font-size: 0.9rem;
  padding: 4px;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.clear-search-btn:hover {
  color: #ef4444;
  background: rgba(239, 68, 68, 0.1);
}

/* Search Results Info */
.search-results-info {
  margin-bottom: 24px;
  padding: 12px 0;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.results-count {
  font-size: 0.95rem;
  color: #64748b;
  font-family: 'Poppins', sans-serif;
  font-weight: 500;
}

.search-term {
  color: #6366f1;
  font-weight: 600;
}

/* No Results Styles */
.no-results {
  grid-column: 1 / -1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  text-align: center;
  animation: fadeIn 0.5s ease;
}

.no-results-icon {
  font-size: 4rem;
  color: #cbd5e1;
  margin-bottom: 24px;
}

.no-results-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #475569;
  margin-bottom: 12px;
  font-family: 'Poppins', sans-serif;
}

.no-results-text {
  font-size: 1rem;
  color: #64748b;
  margin-bottom: 24px;
  max-width: 400px;
  line-height: 1.5;
}

/* Add Class Button Container */
.add-class-container {
  display: flex;
  justify-content: flex-end;
  margin-bottom: 32px;
  animation: slideInRight 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.add-class-btn {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  color: #475569;
  padding: 12px 24px;
  font-weight: 600;
  font-family: 'Poppins', sans-serif;
  letter-spacing: 0.5px;
  box-shadow: 0 4px 16px rgba(99, 102, 241, 0.08);
  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  position: relative;
  overflow: hidden;
  white-space: nowrap;
  flex-shrink: 0;
}

.add-class-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.1), transparent);
  transition: left 0.5s;
}

.add-class-btn:hover::before {
  left: 100%;
}

.add-class-btn:hover {
  background: linear-gradient(135deg, #6366f1 0%, #818cf8 100%);
  border-color: #6366f1;
  color: #ffffff;
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 8px 32px rgba(99, 102, 241, 0.25);
}

.add-icon {
  margin-right: 8px;
  transition: transform 0.3s ease;
}

.add-class-btn:hover .add-icon {
  transform: rotate(180deg);
}

/* Cards Container */
.cards-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 40px;
  max-width: 100%;
}

/* Premium Card Styles */
.premium-card {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 50%, #e0e7ff 100%);
  border-radius: 28px;
  box-shadow: 0 20px 60px rgba(99, 102, 241, 0.12);
  padding: 40px 42px;
  width: 100%;
  max-width: 400px;
  justify-self: center;
  border: 1px solid rgba(255, 255, 255, 0.6);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(10px);
  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.premium-card::before {
  content: "";
  position: absolute;
  top: -80px;
  right: -80px;
  width: 200px;
  height: 200px;
  background: radial-gradient(circle, #6366f1 0%, #818cf8 40%, transparent 70%);
  opacity: 0.08;
  z-index: 0;
  animation: pulseGlow 3s infinite alternate;
}

@keyframes pulseGlow {
  0% { 
    opacity: 0.08; 
    transform: scale(1) rotate(0deg);
  }
  100% { 
    opacity: 0.15; 
    transform: scale(1.1) rotate(10deg);
  }
}

.card-glow {
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, #6366f1, #818cf8, #a5b4fc, #6366f1);
  border-radius: 28px;
  opacity: 0;
  z-index: -1;
  animation: rotate 4s linear infinite;
  transition: opacity 0.3s ease;
}

@keyframes rotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.premium-animate {
  animation: cardSlideIn 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes cardSlideIn {
  0% { 
    opacity: 0; 
    transform: translateY(50px) scale(0.95);
  }
  100% { 
    opacity: 1; 
    transform: translateY(0) scale(1);
  }
}

.premium-card:hover {
  box-shadow: 0 32px 80px rgba(99, 102, 241, 0.2);
  transform: translateY(-8px) scale(1.02);
}

.premium-card:hover .card-glow {
  opacity: 1;
}

/* Profile Section */
.card-header {
  display: flex;
  align-items: flex-start;
  gap: 24px;
  z-index: 1;
  position: relative;
  margin-bottom: 24px;
}

.profile-container {
  position: relative;
  flex-shrink: 0;
}

.profile-pic {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid #ffffff;
  box-shadow: 0 8px 32px rgba(99, 102, 241, 0.2);
  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  position: relative;
  z-index: 1;
}

.profile-status {
  position: absolute;
  bottom: 2px;
  right: 2px;
  width: 20px;
  height: 20px;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  border-radius: 50%;
  border: 3px solid #ffffff;
  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

.card-title-group {
  flex: 1;
  min-width: 0;
  animation: textSlideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.2s both;
}

@keyframes textSlideIn {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.card-title {
  font-size: 1.4rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 12px;
  font-family: 'Poppins', sans-serif;
  letter-spacing: 0.3px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.card-title-text {
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  line-height: 1.3;
}

.title-icon {
  font-size: 1.2rem;
  animation: bounce 2s infinite;
  flex-shrink: 0;
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-5px); }
  60% { transform: translateY(-3px); }
}

.card-section,
.card-prof {
  font-size: 1rem;
  color: #64748b;
  margin-bottom: 8px;
  font-family: 'Poppins', sans-serif;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
}

.card-text {
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  line-height: 1.4;
}

.section-icon,
.prof-icon {
  color: #6366f1;
  font-size: 0.9rem;
  width: 16px;
  flex-shrink: 0;
}

/* Stats Section */
.card-stats {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.8) 0%, rgba(240, 242, 255, 0.8) 100%);
  border-radius: 16px;
  padding: 20px;
  margin: 24px 0;
  border: 1px solid rgba(99, 102, 241, 0.1);
  position: relative;
  z-index: 1;
  animation: statsSlideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.4s both;
}

@keyframes statsSlideIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.stat-number {
  font-size: 1.5rem;
  font-weight: 700;
  color: #6366f1;
  font-family: 'Poppins', sans-serif;
}

.stat-label {
  font-size: 0.85rem;
  color: #64748b;
  font-weight: 500;
  font-family: 'Poppins', sans-serif;
}

.stat-divider {
  width: 1px;
  height: 40px;
  background: linear-gradient(180deg, transparent 0%, #e2e8f0 50%, transparent 100%);
}

/* Footer Button */
.card-footer {
  display: flex;
  justify-content: center;
  margin-top: 28px;
  animation: buttonSlideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.6s both;
}

@keyframes buttonSlideIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.view-btn {
  background: linear-gradient(135deg, #6366f1 0%, #818cf8 100%);
  color: #ffffff;
  border: none;
  border-radius: 16px;
  padding: 14px 32px;
  font-weight: 600;
  font-size: 1rem;
  box-shadow: 0 4px 16px rgba(99, 102, 241, 0.14);
  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  font-family: 'Poppins', sans-serif;
  letter-spacing: 0.5px;
  position: relative;
  overflow: hidden;
  display: flex;
  align-items: center;
  gap: 8px;
}

.view-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.view-btn:hover::before {
  left: 100%;
}

.view-btn:hover {
  background: linear-gradient(135deg, #818cf8 0%, #a5b4fc 100%);
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 12px 32px rgba(99, 102, 241, 0.3);
}

.view-icon {
  font-size: 0.9rem;
  transition: transform 0.3s ease;
}

.view-btn:hover .view-icon {
  transform: translateX(4px);
}

/* Responsive Design */
@media (max-width: 768px) {
  .search-add-container {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .search-container {
    max-width: none;
  }
  
  .add-class-btn {
    align-self: flex-end;
  }
  
  .cards-container {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .premium-card {
    margin: 0 16px;
    padding: 32px 24px;
    max-width: none;
  }
  
  .card-header {
    flex-direction: column;
    text-align: center;
    gap: 16px;
  }
  
  .card-stats {
    flex-direction: column;
    gap: 16px;
  }
  
  .stat-divider {
    width: 100%;
    height: 1px;
  }
  
  .no-results {
    padding: 40px 20px;
  }
  
  .no-results-icon {
    font-size: 3rem;
  }
}

@media (max-width: 480px) {
  .search-input {
    padding: 10px 12px 10px 40px;
    font-size: 0.9rem;
  }
  
  .search-icon {
    left: 12px;
    font-size: 0.9rem;
  }
  
  .clear-search-btn {
    right: 8px;
  }
  
  .add-class-btn {
    padding: 10px 20px;
    font-size: 0.9rem;
  }
  
  .cards-container {
    grid-template-columns: 1fr;
    gap: 12px;
  }
  
  .premium-card {
    margin: 0 8px;
    padding: 24px 16px;
  }
  
  .card-title {
    font-size: 1.2rem;
  }
  
  .card-section,
  .card-prof {
    font-size: 0.9rem;
  }
  
  .no-results {
    padding: 30px 16px;
  }
  
  .no-results-icon {
    font-size: 2.5rem;
  }
  
  .no-results-title {
    font-size: 1.3rem;
  }
  
  .no-results-text {
    font-size: 0.9rem;
  }
}

This is the StudHome.tsx

import React, {useEffect, useState} from 'react';
import {useSound} from 'react-sounds';
import {useNavigate, useParams} from 'react-router-dom';
import {useDispatch, useSelector} from 'react-redux';
import type {RootState} from '../../store/store';
import {getRecordSlice, getProfImageSlice, getProfNameSlice, unenrollSlice} from '../../store/slice/studHomeSlice';
import StudHeader from '../../components/StudHeader';
import StudSidebar from '../../components/StudSidebar';
import '../../assets/css/StudHome.css';
import JoinClassModal from '../../components/JoinClassModal';
import Swal from 'sweetalert2';

function StudHome () {
    const navigate = useNavigate();
    const dispatch = useDispatch();

    const record = useSelector((state: RootState) => state.studHome.record);

    useEffect(() => {
        getRecord();
    },[])

    const getRecord = async () => {
        getRecordSlice(dispatch);
    }

    const [profImage, setProfImage] = useState<{ [key: string]: string }>({});
    const [profName, setProfName] = useState<{ [key: string]: string }>({});
    useEffect(() => {
        if (record.length > 0) {
          record.forEach(async (rec) => {
            const image = await getProfImageSlice(rec.class_classstud_profid);
            setProfImage((prev) => ({ ...prev, [rec.class_classstud_profid]: image }));

            const name = await getProfNameSlice(rec.class_classstud_profid);
            setProfName((prev) => ({ ...prev, [rec.class_classstud_profid]: name }));
          });
        }
    }, [record]);

    // For Modal Start
    const { play } = useSound('notification/popup');
    const [open, setOpen] = useState(false);
    // For Modal End

    //   Sidebar Function Start
      const [sidebarActive, setSidebarActive] = useState(false);
    
      const toggleSidebar = () => {
        setSidebarActive(!sidebarActive);
      };
    //   Sidebar Function End

    const joinClass = async () => {
        play();
        setOpen(true);
    }

    const unenroll = async (code: number) => {
        Swal.fire({
            title:'Are You Sure?',
            text:'Do you really want to unenroll from this class?',
            icon:'info',
            showDenyButton:true
        }).then((result) => {
            if (result.isConfirmed) {
                unenrollSlice(code, dispatch);
            } else if (result.isDenied) {
                window.location.reload();
            }
        })
    }

    const viewClass = async (code: number) => {
        navigate(`/StudStream/${code}`);
    }

    return(
        <>
        <JoinClassModal open={open} onOpenChange={setOpen} />
        <StudHeader/>

        {/* Sidebar Start */}
        <button className="burger-btn" onClick={toggleSidebar}>
            <i className="fa-solid fa-list" style={{fontSize:15}}></i>
        </button>
        <StudSidebar sidebarActive={sidebarActive} toggleSidebar={toggleSidebar} />
        {/* Sidebar End */}
        
        <div id="content">
            <div className="container mt-4">
                {/* Main Content Start */}
                <div>
                    <div className="add-class-container">
                        <button className='btn btn-outline-primary add-class-btn' onClick={() => joinClass()} onMouseEnter={e => e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)'} onMouseLeave={e => e.currentTarget.style.transform = 'translateY(0) scale(1)'}><i className="fa-solid fa-door-open add-icon"></i> Join Class</button>
                    </div>

                    <div className="cards-container">
                    
                        {/* Premium Card Start */}

                        {record.map((rec) => (
                        <div className="premium-card premium-animate" key={rec.class_classstud_id}>
                            <div className="card-glow"></div>

                            <div className="card-header">
                                <div className="profile-container">
                                    <img src={profImage[rec.class_classstud_profid]} alt="Profile" className="profile-pic" onMouseEnter={e => e.currentTarget.style.transform = 'scale(1.1) rotate(5deg)'} onMouseLeave={e => e.currentTarget.style.transform = 'scale(1) rotate(0deg)'}/>
                                    
                                    <div className="profile-status"></div>
                                </div>

                            <div className="card-title-group">
                                <div style={{display:'flex', justifyContent:'flex-end'}}>
                                    <div className="dropdown">
                                        <button className="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>

                                        <ul className="dropdown-menu">
                                            <li><button className="dropdown-item" onClick={() => unenroll(rec.class_classstud_code)}>Unenroll</button></li>
                                        </ul>
                                    </div>
                                </div>

                                <h5 className="card-title">
                                    <span className="title-icon">ðŸ“š</span>

                                    <span className="card-title-text">{rec.class_classstud_title}</span>
                                </h5>
                                
                                <p className="card-section">
                                    <i className="fa-solid fa-users section-icon"></i>

                                    <span className="card-text">Section: {rec.class_classstud_section}</span>
                                </p>
                                
                                <p className="card-prof">
                                    <i className="fa-solid fa-user-tie prof-icon"></i>

                                    <span className="card-text">Prof: {profName[rec.class_classstud_profid]}</span>
                                </p>

                                <p className="card-prof">
                                    <i className="fa-solid fa-key prof-icon"></i>

                                    <span className="card-text">Class Code: {rec.class_classstud_code}</span>
                                </p>
                            </div>
                            </div>
                            
                            <div className="card-stats">
                                <div className="stat-item">
                                    <span className="stat-number">24</span>

                                    <span className="stat-label">Students</span>
                                </div>

                                <div className="stat-divider"></div>

                                <div className="stat-item">
                                    <span className="stat-number">8</span>
                                    
                                    <span className="stat-label">Assignments</span>
                                </div>
                            </div>
                            
                            <div className="card-footer">
                                <button className="btn view-btn"
                                    onMouseEnter={e => {
                                    e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)';
                                    e.currentTarget.style.boxShadow = '0 12px 32px rgba(99,102,241,0.3)';
                                    }}

                                    onMouseLeave={e => {
                                    e.currentTarget.style.transform = 'translateY(0) scale(1)';
                                    e.currentTarget.style.boxShadow = '0 4px 16px rgba(99,102,241,0.14)';
                                    }}
                                    
                                    onClick={() => viewClass(rec.class_classstud_code)}><i className="fa-solid fa-arrow-right view-icon"></i>View Class</button>
                            </div>
                        </div>
                        ))}

                        {/* Premium Card End */}
                        
                    </div>
                    
                </div>
                {/* Main Content End */}
            </div>
        </div>
        </>
    );
}

export default StudHome;

This is the StudHome.css

/* Global Styles */
.bord {
    border: 1px solid black;
}

/* Content Wrapper */
.content-wrapper {
  animation: fadeInUp 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes fadeInUp {
  0% { 
    opacity: 0; 
    transform: translateY(30px);
  }
  100% { 
    opacity: 1; 
    transform: translateY(0);
  }
}

/* Add Class Button Container */
.add-class-container {
  display: flex;
  justify-content: flex-end;
  margin-bottom: 32px;
  animation: slideInRight 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes slideInRight {
  0% {
    opacity: 0;
    transform: translateX(30px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.add-class-btn {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border: 2px solid #e2e8f0;
  border-radius: 16px;
  color: #475569;
  padding: 12px 24px;
  font-weight: 600;
  font-family: 'Poppins', sans-serif;
  letter-spacing: 0.5px;
  box-shadow: 0 4px 16px rgba(99, 102, 241, 0.08);
  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  position: relative;
  overflow: hidden;
}

.add-class-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.1), transparent);
  transition: left 0.5s;
}

.add-class-btn:hover::before {
  left: 100%;
}

.add-class-btn:hover {
  background: linear-gradient(135deg, #6366f1 0%, #818cf8 100%);
  border-color: #6366f1;
  color: #ffffff;
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 8px 32px rgba(99, 102, 241, 0.25);
}

.add-icon {
  margin-right: 8px;
  transition: transform 0.3s ease;
}

.add-class-btn:hover .add-icon {
  transform: rotate(180deg);
}

/* Cards Container */
.cards-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 40px;
  max-width: 100%;
}

/* Premium Card Styles */
.premium-card {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 50%, #e0e7ff 100%);
  border-radius: 28px;
  box-shadow: 0 20px 60px rgba(99, 102, 241, 0.12);
  padding: 40px 42px;
  width: 100%;
  max-width: 400px;
  justify-self: center;
  border: 1px solid rgba(255, 255, 255, 0.6);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(10px);
  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.premium-card::before {
  content: "";
  position: absolute;
  top: -80px;
  right: -80px;
  width: 200px;
  height: 200px;
  background: radial-gradient(circle, #6366f1 0%, #818cf8 40%, transparent 70%);
  opacity: 0.08;
  z-index: 0;
  animation: pulseGlow 3s infinite alternate;
}

@keyframes pulseGlow {
  0% { 
    opacity: 0.08; 
    transform: scale(1) rotate(0deg);
  }
  100% { 
    opacity: 0.15; 
    transform: scale(1.1) rotate(10deg);
  }
}

.card-glow {
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, #6366f1, #818cf8, #a5b4fc, #6366f1);
  border-radius: 28px;
  opacity: 0;
  z-index: -1;
  animation: rotate 4s linear infinite;
  transition: opacity 0.3s ease;
}

@keyframes rotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.premium-animate {
  animation: cardSlideIn 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes cardSlideIn {
  0% { 
    opacity: 0; 
    transform: translateY(50px) scale(0.95);
  }
  100% { 
    opacity: 1; 
    transform: translateY(0) scale(1);
  }
}

.premium-card:hover {
  box-shadow: 0 32px 80px rgba(99, 102, 241, 0.2);
  transform: translateY(-8px) scale(1.02);
}

.premium-card:hover .card-glow {
  opacity: 1;
}

/* Profile Section */
.card-header {
  display: flex;
  align-items: flex-start;
  gap: 24px;
  z-index: 1;
  position: relative;
  margin-bottom: 24px;
}

.profile-container {
  position: relative;
  flex-shrink: 0;
}

.profile-pic {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  object-fit: cover;
  border: 4px solid #ffffff;
  box-shadow: 0 8px 32px rgba(99, 102, 241, 0.2);
  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  position: relative;
  z-index: 1;
}

.profile-status {
  position: absolute;
  bottom: 2px;
  right: 2px;
  width: 20px;
  height: 20px;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  border-radius: 50%;
  border: 3px solid #ffffff;
  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

.card-title-group {
  flex: 1;
  min-width: 0;
  animation: textSlideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.2s both;
}

@keyframes textSlideIn {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.card-title {
  font-size: 1.4rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 12px;
  font-family: 'Poppins', sans-serif;
  letter-spacing: 0.3px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.card-title-text {
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  line-height: 1.3;
}

.title-icon {
  font-size: 1.2rem;
  animation: bounce 2s infinite;
  flex-shrink: 0;
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-5px); }
  60% { transform: translateY(-3px); }
}

.card-section,
.card-prof {
  font-size: 1rem;
  color: #64748b;
  margin-bottom: 8px;
  font-family: 'Poppins', sans-serif;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
}

.card-text {
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  line-height: 1.4;
}

.section-icon,
.prof-icon {
  color: #6366f1;
  font-size: 0.9rem;
  width: 16px;
  flex-shrink: 0;
}

/* Stats Section */
.card-stats {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.8) 0%, rgba(240, 242, 255, 0.8) 100%);
  border-radius: 16px;
  padding: 20px;
  margin: 24px 0;
  border: 1px solid rgba(99, 102, 241, 0.1);
  position: relative;
  z-index: 1;
  animation: statsSlideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.4s both;
}

@keyframes statsSlideIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.stat-number {
  font-size: 1.5rem;
  font-weight: 700;
  color: #6366f1;
  font-family: 'Poppins', sans-serif;
}

.stat-label {
  font-size: 0.85rem;
  color: #64748b;
  font-weight: 500;
  font-family: 'Poppins', sans-serif;
}

.stat-divider {
  width: 1px;
  height: 40px;
  background: linear-gradient(180deg, transparent 0%, #e2e8f0 50%, transparent 100%);
}

/* Footer Button */
.card-footer {
  display: flex;
  justify-content: center;
  margin-top: 28px;
  animation: buttonSlideIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.6s both;
}

@keyframes buttonSlideIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.view-btn {
  background: linear-gradient(135deg, #6366f1 0%, #818cf8 100%);
  color: #ffffff;
  border: none;
  border-radius: 16px;
  padding: 14px 32px;
  font-weight: 600;
  font-size: 1rem;
  box-shadow: 0 4px 16px rgba(99, 102, 241, 0.14);
  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  font-family: 'Poppins', sans-serif;
  letter-spacing: 0.5px;
  position: relative;
  overflow: hidden;
  display: flex;
  align-items: center;
  gap: 8px;
}

.view-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.view-btn:hover::before {
  left: 100%;
}

.view-btn:hover {
  background: linear-gradient(135deg, #818cf8 0%, #a5b4fc 100%);
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 12px 32px rgba(99, 102, 241, 0.3);
}

.view-icon {
  font-size: 0.9rem;
  transition: transform 0.3s ease;
}

.view-btn:hover .view-icon {
  transform: translateX(4px);
}

/* Responsive Design */
@media (max-width: 768px) {
  .cards-container {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .premium-card {
    margin: 0 16px;
    padding: 32px 24px;
    max-width: none;
  }
  
  .card-header {
    flex-direction: column;
    text-align: center;
    gap: 16px;
  }
  
  .card-stats {
    flex-direction: column;
    gap: 16px;
  }
  
  .stat-divider {
    width: 100%;
    height: 1px;
  }
}

@media (max-width: 480px) {
  .cards-container {
    grid-template-columns: 1fr;
    gap: 12px;
  }
  
  .premium-card {
    margin: 0 8px;
    padding: 24px 16px;
  }
  
  .card-title {
    font-size: 1.2rem;
  }
  
  .card-section,
  .card-prof {
    font-size: 0.9rem;
  }
}